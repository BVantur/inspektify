import kotlin.String;
import kotlin.collections.List;
import kotlin.collections.Map;
import kotlin.collections.Set;

CREATE TABLE NetworkTrafficDataLocal (
  id INTEGER NOT NULL PRIMARY KEY,
  sessionId INTEGER NOT NULL,
  method TEXT,
  url TEXT,
  host TEXT,
  path TEXT,
  protocol TEXT,

  requestTimestamp INTEGER,
  requestHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
  requestPayload TEXT,
  requestContentType TEXT,
  requestPayloadSize INTEGER,
  requestHeadersSize INTEGER,

  responseTimestamp INTEGER,
  responseStatus INTEGER,
  responseStatusDescription TEXT,
  responseHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
  responsePayload TEXT,
  responseContentType TEXT,
  responsePayloadSize INTEGER,
  responseHeadersSize INTEGER,
  tookDurationInMs INTEGER
);

getAllNetworkTraffic:
SELECT * FROM NetworkTrafficDataLocal;

insertNetworkTraffic:
INSERT OR REPLACE INTO NetworkTrafficDataLocal(id, sessionId, method, url, host, path, protocol, requestTimestamp, requestHeaders, requestPayload, requestContentType, requestPayloadSize, requestHeadersSize, responseTimestamp, responseStatus, responseStatusDescription, responseHeaders, responsePayload, responseContentType, responsePayloadSize, responseHeadersSize, tookDurationInMs)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getNetworkTrafficById:
SELECT * FROM NetworkTrafficDataLocal WHERE id = ?;

removeAllNetworkTrafficData:
DELETE FROM NetworkTrafficDataLocal;

removeNetworkTrafficOlderThan:
DELETE FROM NetworkTrafficDataLocal WHERE requestTimestamp < ?;

getDistinctSessionIds:
SELECT DISTINCT sessionId FROM NetworkTrafficDataLocal ORDER BY sessionId DESC;

removeRowsBySessionId:
DELETE FROM NetworkTrafficDataLocal WHERE sessionId = ?;